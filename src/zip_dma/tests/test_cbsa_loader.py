import unittest
import csv
import io
import os
from zip_dma.data_store import DataStore
from zip_dma.cbsa_loader import CbsaLoader
from zip_dma.model.map.cbsa_msa_id_map import CbsaMsaIdMap
from zip_dma.model.map.msa_map import MsaMap

class CbsaLoaderTest(unittest.TestCase):
    
    @classmethod
    def setUpClass(cls):
        cls.file_location ="/tmp/CbsaLoaderTest.json"
        temp = DataStore.get_data_store(cls.file_location)
        cls.msa_map = MsaMap.get_map()
        cls.cbsa_msa_map = CbsaMsaIdMap.get_map()
        cls.fileContents = """CBSA,MDIV,STCOU,NAME,LSAD,CENSUS2010POP,ESTIMATESBASE2010,POPESTIMATE2010,POPESTIMATE2011,POPESTIMATE2012,POPESTIMATE2013,POPESTIMATE2014,POPESTIMATE2015,NPOPCHG2010,NPOPCHG2011,NPOPCHG2012,NPOPCHG2013,NPOPCHG2014,NPOPCHG2015,BIRTHS2010,BIRTHS2011,BIRTHS2012,BIRTHS2013,BIRTHS2014,BIRTHS2015,DEATHS2010,DEATHS2011,DEATHS2012,DEATHS2013,DEATHS2014,DEATHS2015,NATURALINC2010,NATURALINC2011,NATURALINC2012,NATURALINC2013,NATURALINC2014,NATURALINC2015,INTERNATIONALMIG2010,INTERNATIONALMIG2011,INTERNATIONALMIG2012,INTERNATIONALMIG2013,INTERNATIONALMIG2014,INTERNATIONALMIG2015,DOMESTICMIG2010,DOMESTICMIG2011,DOMESTICMIG2012,DOMESTICMIG2013,DOMESTICMIG2014,DOMESTICMIG2015,NETMIG2010,NETMIG2011,NETMIG2012,NETMIG2013,NETMIG2014,NETMIG2015,RESIDUAL2010,RESIDUAL2011,RESIDUAL2012,RESIDUAL2013,RESIDUAL2014,RESIDUAL2015
35620,,,"New York-Newark-Jersey City, NY-NJ-PA",Metropolitan Statistical Area,19567410,19566387,19601147,19756397,19871785,19994144,20095119,20182305,34760,155250,115388,122359,100975,87186,63954,255392,250679,250053,247769,249610,33036,140461,136944,143705,144834,147174,30918,114931,113735,106348,102935,102436,30402,140208,131531,143570,164179,163951,-25725,-99715,-127972,-114550,-168649,-164019,4677,40493,3559,29020,-4470,-68,-835,-174,-1906,-13009,2510,-15182
35620,20524,,"Dutchess County-Putnam County, NY",Metropolitan Division,397198,397198,397540,398181,396914,396559,395632,394796,342,641,-1267,-355,-927,-836,1012,3661,3504,3567,3383,3440,746,2956,2998,3107,3139,3199,266,705,506,460,244,241,248,979,980,1067,1230,1229,-158,-891,-2771,-1984,-2365,-2402,90,88,-1791,-917,-1135,-1173,-14,-152,18,102,-36,96
35620,20524,36027,"Dutchess County, NY",County or equivalent,297488,297448,297745,298274,297270,296963,296380,295754,297,529,-1004,-307,-583,-626,764,2753,2666,2746,2569,2614,559,2282,2372,2402,2460,2509,205,471,294,344,109,105,211,862,850,929,1071,1069,-107,-690,-2164,-1679,-1680,-1966,104,172,-1314,-750,-609,-897,-12,-114,16,99,-83,166
35620,35004,36059,"Nassau County, NY",County or equivalent,1339532,1339762,1341882,1347270,1350924,1354842,1358673,1361350,2120,5388,3654,3918,3831,2677,3708,14303,14169,13780,14086,14113,2602,10904,10743,11402,10777,10991,1106,3399,3426,2378,3309,3122,940,4377,3903,4286,4913,4915,219,-2058,-3504,-2029,-4075,-4471,1159,2319,399,2257,838,444,-145,-330,-171,-717,-316,-889
35620,35004,36103,"Suffolk County, NY",County or equivalent,1493350,1493291,1494878,1500649,1500001,1502288,1502342,1501587,1587,5771,-648,2287,54,-755,4374,16466,16059,15617,15575,15568,2710,11578,11456,11943,12085,12262,1664,4888,4603,3674,3490,3306,1049,4570,4289,4680,5326,5335,-1119,-3109,-9745,-5976,-7957,-9522,-70,1461,-5456,-1296,-2631,-4187,-7,-578,205,-91,-805,126
35620,35084,,"Newark, NJ-PA",Metropolitan Division,2471171,2469792,2472819,2483104,2488956,2499320,2506933,2511493,3027,10285,5852,10364,7613,4560,7177,28678,28133,28313,27912,27618,4383,18099,17914,18456,18572,18726,2794,10579,10219,9857,9340,8892,3123,13648,12319,13443,15365,15318,-2850,-14716,-16605,-11696,-16887,-17717,273,-1068,-4286,1747,-1522,-2399,-40,774,-81,-1240,-205,-1933
35620,35084,34013,"Essex County, NJ",County or equivalent,783969,783987,784597,787006,787707,790935,794962,797434,610,2409,701,3228,4027,2472,2579,10520,10485,10612,10334,10303,1428,6006,5727,5811,6044,6073,1151,4514,4758,4801,4290,4230,1281,5554,4974,5392,6154,6138,-1843,-7884,-9043,-6306,-6606,-7087,-562,-2330,-4069,-914,-452,-949,21,225,12,-659,189,-809
35620,35084,42103,"Pike County, PA",County or equivalent,57369,57366,57332,57526,56797,56651,56238,55949,-34,194,-729,-146,-413,-289,114,366,372,397,408,400,73,395,462,475,484,470,41,-29,-90,-78,-76,-70,6,36,50,58,67,66,-62,-47,-698,-118,-370,-284,-56,-11,-648,-60,-303,-218,-19,234,9,-8,-34,-1
35620,35614,,"New York-Jersey City-White Plains, NY-NJ",Metropolitan Division,13866159,13866344,13894028,14027193,14134990,14241135,14331539,14413079,27684,133165,107797,106145,90404,81540,47683,192284,188814,188776,186813,188871,22595,96924,93833,98797,100261,101996,25088,95360,94981,89979,86552,86875,25042,116634,110040,120094,137345,137154,-21817,-78941,-95347,-92865,-137365,-129907,3225,37693,14693,27229,-20,7247,-629,112,-1877,-11063,3872,-12582
35620,35614,34003,"Bergen County, NJ",County or equivalent,905116,905117,906895,914018,920006,926284,932836,938506,1778,7123,5988,6278,6552,5670,2378,9361,8871,8996,9213,9351,1675,6991,6873,7294,6915,6901,703,2370,1998,1702,2298,2450,1284,5583,5287,5800,6621,6594,-106,-653,-1100,-416,-2257,-2620,1178,4930,4187,5384,4364,3974,-103,-177,-197,-808,-110,-754
35620,35614,36087,"Rockland County, NY",County or equivalent,311687,311687,312484,315807,317775,320498,323323,326037,797,3323,1968,2723,2825,2714,1121,4558,4639,4622,4984,5204,453,1970,1976,2158,2178,2287,668,2588,2663,2464,2806,2917,344,1547,1352,1500,1708,1704,-204,-645,-2070,-1059,-1526,-1863,140,902,-718,441,182,-159,-11,-167,23,-182,-163,-44
10180,,48059,"Callahan County, TX",County or equivalent,13544,13544,13518,13535,13519,13528,13520,13557,-26,17,-16,9,-8,37,31,120,122,136,124,127,59,158,142,176,173,172,-28,-38,-20,-40,-49,-45,0,5,4,7,7,8,4,39,2,45,45,87,4,44,6,52,52,95,-2,11,-2,-3,-11,-13
31080,11244,,"Anaheim-Santa Ana-Irvine, CA",Metropolitan Division,3010232,3010266,3017866,3056084,3089343,3120180,3144961,3169776,7600,38218,33259,30837,24781,24815,9304,38238,37842,37621,37706,37776,4316,17679,17819,18757,19383,19480,4988,20559,20023,18864,18323,18296,2348,12271,11605,12958,14981,15061,329,6052,1900,-1527,-7439,-10049,2677,18323,13505,11431,7542,5012,-65,-664,-269,542,-1084,1507
"""
        cls.fileContents1 = """CBSA,MDIV,NAME,LSAD,POPESTIMATE2016
10180,,"Abilene, TX",Metropolitan Statistical Area,11000
"""
        cls.fileContents2 = """CBSA,MDIV,NAME,LSAD,POPESTIMATE2017
10180,,"Abilene, TX",Metropolitan Statistical Area,12000
"""

    @classmethod
    def tearDownClass(cls):
        MsaMap.test_clear_instance()
        CbsaMsaIdMap.test_clear_instance()
        DataStore.test_clear_instance()
        if os.path.isfile(cls.file_location):
            os.remove(cls.file_location)

    def parse_string_as_csv(self, s):
        return csv.DictReader(io.StringIO(s))
    
    def test_set_and_get(self):
        """Test storing and retrieving data"""
        CbsaLoader.load_file(self.parse_string_as_csv(CbsaLoaderTest.fileContents))
        msa = CbsaLoaderTest.msa_map.get("35620")
        self.assertIsNotNone(msa)
        if msa is not None:
            self.assertEqual(msa.msa_name, "New York-Newark-Jersey City, NY-NJ-PA")
            self.assertEqual(msa.get_population(2014), 20095119)
            self.assertEqual(msa.get_population(2015), 20182305)
        self.assertEqual(CbsaLoaderTest.cbsa_msa_map.get("20524"), "35620")
        self.assertEqual(CbsaLoaderTest.cbsa_msa_map.get("35620"), "35620")
        self.assertEqual(CbsaLoaderTest.cbsa_msa_map.get("11244"), "31080")
        self.assertIsNone(CbsaLoaderTest.cbsa_msa_map.get("99999"))

    def test_set_with_different_pop_years(self):
        """Test storing already existing data but with different populations"""
        CbsaLoader.load_file(self.parse_string_as_csv(CbsaLoaderTest.fileContents1))
        CbsaLoader.load_file(self.parse_string_as_csv(CbsaLoaderTest.fileContents2))
        msa = CbsaLoaderTest.msa_map.get("10180")
        self.assertIsNotNone(msa)
        if msa is not None:
            self.assertEqual(msa.get_population(2016), 11000)
            self.assertEqual(msa.get_population(2017), 12000)

    def test_set_overwrite(self):
        """Confirm overwrite overwrites"""
        CbsaLoader.load_file(self.parse_string_as_csv(CbsaLoaderTest.fileContents1), True)
        CbsaLoader.load_file(self.parse_string_as_csv(CbsaLoaderTest.fileContents2), True)
        msa = CbsaLoaderTest.msa_map.get("10180")
        self.assertIsNotNone(msa)
        if msa is not None:
            self.assertEqual(msa.get_population(2016), 0)
            self.assertEqual(msa.get_population(2017), 12000)
